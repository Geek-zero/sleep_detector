void handleWebSocketMessage(void *arg, uint8_t *data, size_t len) {
  AwsFrameInfo *info = (AwsFrameInfo*)arg;
  if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
    data[len] = 0;
    //   handleReceivedMessage(data);
 
    reciv = String((const char *)data);
    Serial.println(reciv);
     DynamicJsonDocument doc(200);
  JsonObject obj = doc.as<JsonObject>();

if(jsonExtract(reciv, "variable") == "temp"){
 writeFile("/temp.txt",jsonExtract(reciv, "value"));
}


else if(jsonExtract(reciv, "variable") == "amb"){
 writeFile("/amb.txt",jsonExtract(reciv, "value"));
}
  }
}


void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type,
             void *arg, uint8_t *data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());

      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("WebSocket client #%u disconnected\n", client->id());

      break;
    case WS_EVT_DATA:
      handleWebSocketMessage(arg, data, len);
      //       Serial.println(data);
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

void initWebSocket() {
  ws.onEvent(onEvent);
  server.addHandler(&ws);
}
